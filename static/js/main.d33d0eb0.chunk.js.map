{"version":3,"sources":["Components/Common/Footer.js","Components/Common/TitleToolbar.js","Components/Pages/Annotation/EditText.js","Components/Pages/Annotation/DialogCard.js","Components/Pages/Annotation/DialogTable.js","Components/Pages/Annotation/Tables.js","Components/Pages/Annotation/Creator.js","Components/Pages/Annotation/DialogToolset.js","Components/Pages/Annotation/Toolset.js","Components/Pages/AnnotationPage.js","Components/Pages/Annotation/DialogCardLearning.js","Components/Pages/DownloadPage.js","Components/Pages/UploadPage.js","Components/Pages/ErrorPage.js","Components/Page.js","index.js"],"names":["Footer","_jsx","children","_jsxs","Typography","variant","color","align","Link","href","Date","getFullYear","useStyles","makeStyles","theme","toolbar","borderBottom","palette","divider","backgroundColor","TitleToolbar","props","useTheme","classes","openHelp","setOpenHelp","React","useState","Toolbar","className","Dialog","open","onClose","DialogTitle","DialogContent","DialogContentText","Grid","container","direction","justifyContent","alignItems","item","xs","Button","size","onClick","style","position","left","top","transform","Avatar","src","component","noWrap","fontFamily","fontVariant","IconButton","changeTheme","setInfo","info","Brightness2Icon","WbSunnyIcon","target","rel","GitHubIcon","Select","value","MenuItem","EditText","text","setText","meta","selected","turns","edit","entities","split","map","entry","i","slice","indexOf","join","replaceAll","fullWidth","TextField","autoFocus","margin","label","multiline","onChange","event","DialogActions","reload","newMeta","data","dialogs","utterance","close","save","incoming","background","green","grey","padding","lineHeight","fontSize","borderRadius","width","bottom","border","content","height","pointerEvents","borderBottomColor","borderWidth","marginLeft","outgoing","blue","steel","DialogCard","capitalize","string","charAt","toUpperCase","addAlpha","opacity","Math","round","min","max","toString","checkPreviousTopic","i_turn","topic","previousTopic","checkFutureTopic","futureTopic","turn","speaker","topics","textAlign","Divider","cursor","editTurn","setTopic","Paper","gutterBottom","i_split","i_id","substring","phrase","phrase_split","start","end_id","end","newDelex","ent","handleRemoveEntity","display","verticalAlign","onMouseUp","entity","selection","window","getSelection","anchorOffset","focusOffset","alert","handleSetEntity","intentions","int","ButtonBase","index_remove","splice","handleRemoveIntention","intention","includes","push","handleSetIntention","tablepaper","marginTop","spacing","overflow","tableRow","DialogTable","change","index","newStatus","oldStatus","status","newCount","count","List","type","Fragment","ListItem","ListItemText","primary","id","ListItemSecondaryAction","drawer","select","CreateIcon","CheckIcon","DeleteOutlineIcon","KeyboardReturnIcon","fab_dialogue","a11yProps","Tables","table","setTable","Drawer","anchor","closeDrawer","Tabs","indicatorColor","textColor","n","Tab","active","finished","deleted","Fab","openDrawer","ChatBubbleOutlineIcon","randomColor","require","Creator","setOpen","creation","setCreation","luminosity","_Fragment","AddCircleOutlineIcon","Box","CasinoIcon","disabled","newTopics","toolsetOpen","length","newIntentions","newEntities","handleCreate","DialogToolset","alpha","setAlpha","changeAlpha","toolsetSelected","dense","ToggleButton","SortByAlphaIcon","deselectIntention","LabelOffIcon","button","handleSelectIntention","paddingLeft","marginRight","changeColorIntention","edge","deselectEntity","handleSelectEntity","changeColorEntity","handleSelectTopic","fab_entity","right","fab_intention","fab_topic","Toolset","openToolset","closeToolset","changeToolset","ErrorOutlineIcon","PermIdentityIcon","Annotation","dialogUp","dialogDown","paddingTop","ButtonGroup","incomingHex","outgoingHex","DownloadPage","paddingBottom","startIcon","GetAppIcon","filename","output","intention_names","e","entity_names","ontology","Array","isArray","intents","actions","d","t","turn_meta","intent_type_ont","intent","intent_type","meta_delex","final_delex","start_id","newList","before","filter","diag","after","file","Blob","JSON","stringify","undefined","navigator","msSaveOrOpenBlob","a","document","createElement","url","URL","createObjectURL","download","body","appendChild","click","setTimeout","removeChild","revokeObjectURL","dropzone","maxWidth","card","continueButton","SideCard","Card","CardActionArea","CardMedia","image","flexDirection","CardContent","title","Cards","UploadPage","settings","setSettings","todo","manual","verification","range","handleTodo","name","checked","printError","error","explicit","console","log","message","handleFile","fileObjs","setTemp","parse","str","decodeURIComponent","atob","c","charCodeAt","SyntaxError","json_data","DropzoneAreaBase","dropzoneText","onAdd","FormGroup","FormControlLabel","control","Switch","Slider","handleRange","step","valueLabelFormat","valueLabelDisplay","floor","entities_id","Object","keys","intentions_id","concat","Set","sort","turnmeta","intent_name","intents_str","intention_list","replace","utterance_delex","oldDelex_split","entity_id","shift","handleConfirm","ErrorPage","lighttheme","createTheme","main","darktheme","Page","learning","dataLearning","metaLearning","forms","useMediaQuery","handleStep","nstep","sendInfo","MuiThemeProvider","CssBaseline","minHeight","Container","paddingRight","Stepper","activeStep","alternativeLabel","Step","StepLabel","AnnotationPage","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.d33d0eb0.chunk.js","sourcesContent":["import Link from '@material-ui/core/Link';\r\nimport React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nexport default function Footer() {\r\n    return(\r\n        <footer>\r\n            <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n                {'Copyright © '}\r\n                <Link color=\"inherit\" href=\"https://github.com/ZeCariocaUnicamp/Assis\">\r\n                    Zé Carioca Team (Github)\r\n                </Link>{' '}\r\n                {new Date().getFullYear()}\r\n                {'.'}\r\n            </Typography>\r\n        </footer>\r\n    )\r\n}","import Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport GitHubIcon from '@material-ui/icons/GitHub';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { useTheme, makeStyles } from '@material-ui/core/styles';\r\nimport React from 'react';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport WbSunnyIcon from '@material-ui/icons/WbSunny';\r\nimport Brightness2Icon from '@material-ui/icons/Brightness2';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    toolbar: {\r\n        borderBottom: `1px solid ${theme.palette.divider}`,\r\n        backgroundColor: 'background.default',\r\n    },\r\n}));\r\n\r\nexport default function TitleToolbar(props){\r\n    const theme = useTheme();\r\n    const classes = useStyles();\r\n    const [openHelp, setOpenHelp] = React.useState(false);\r\n    const changeTheme=()=>{\r\n        props.setInfo({...props.info, theme: props.info.theme==='light'?'dark':'light'})\r\n    }\r\n    return(\r\n        <Toolbar className={classes.toolbar}>\r\n            <Dialog open={openHelp} onClose={() => {setOpenHelp(false)}}>\r\n                <DialogTitle>{\"Sobre o IAnotador\"}</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus maximus quam dapibus massa viverra, sed convallis dolor bibendum. Morbi ornare eros vel orci porttitor, sit amet molestie nisl varius. Curabitur velit dolor, egestas quis ex eu, commodo mattis eros. In tortor magna, vulputate maximus convallis sit amet, suscipit in mauris. Praesent tempor eleifend enim ut convallis. Nam vehicula est vitae turpis fringilla vestibulum a lacinia sem. Fusce varius vulputate metus, malesuada sollicitudin arcu pulvinar id. Nam eleifend ornare erat, eu lacinia nibh iaculis ac. Donec sollicitudin risus in orci lacinia accumsan. Proin vulputate dictum viverra.\r\n                        Feito com ❤️ pelo Andreis. Baseado no Design do Henrique.\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n            </Dialog>\r\n            <Grid container direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\">\r\n                <Grid item xs={6} container  direction=\"row\" justifyContent=\"flex-start\" alignItems=\"center\">\r\n                    <Button size=\"small\" onClick={() => {setOpenHelp(true)}}>Ajuda</Button>\r\n                </Grid>\r\n                <Grid item xs={2} container direction=\"row\" justifyContent=\"center\" alignItems=\"center\" style={{position: 'absolute', left: '50%', top: '50%', transform: 'translate(-50%, -50%)'}}>\r\n                    <Avatar src='https://dandonota.files.wordpress.com/2008/10/machado.jpg'/>\r\n                    <Typography component=\"h2\" variant=\"h5\" color=\"inherit\" align=\"center\" noWrap style={{fontFamily: \"Bookman Old Style\", fontVariant: 'small-caps'}}>\r\n                        &nbsp;Assis\r\n                    </Typography>\r\n                </Grid>\r\n                <Grid item xs={6} container  direction=\"row\" justifyContent=\"flex-end\" alignItems=\"center\">\r\n                    <IconButton onClick={changeTheme}>\r\n                        {props.info.theme==='light'?<Brightness2Icon />:<WbSunnyIcon />}\r\n                    </IconButton>\r\n                    <IconButton href=\"https://github.com/ZeCariocaUnicamp/Assis\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                        <GitHubIcon />\r\n                    </IconButton>\r\n                    <Select size=\"small\" value=\"pt\">\r\n                        <MenuItem value=\"pt\">PT</MenuItem>\r\n                    </Select>\r\n                </Grid>\r\n            </Grid>\r\n        </Toolbar>\r\n    )\r\n}","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\nexport default function EditText(props){\r\n    const [text, setText] = React.useState(getText());\r\n    const changeText = (event) => {\r\n        setText(event.target.value);\r\n    };\r\n    function getText(){\r\n        let text = props.info.meta[props.info.selected].turns[props.info.edit].entities;\r\n        return text.split(\"&&&\").map((entry,i) => i!==0?entry.slice(entry.indexOf('###')):entry).join('').replaceAll(\"###\",\"\")\r\n    }\r\n    const close = () => {\r\n        props.setInfo({...props.info, edit:-1});\r\n    };\r\n    const reload = () => {\r\n        let newMeta = props.info.meta;\r\n        newMeta[props.info.selected].turns[props.info.edit].entities = props.info.data.dialogs[props.info.selected].turns[props.info.edit].utterance;\r\n        props.setInfo({...props.info, meta: newMeta, edit:-1});\r\n    };\r\n    const save = () => {\r\n        let newMeta = props.info.meta;\r\n        newMeta[props.info.selected].turns[props.info.edit].entities=text;\r\n        props.setInfo({...props.info, meta: newMeta, edit:-1});\r\n    }\r\n    return (\r\n        <Dialog open={props.info.edit!==-1} fullWidth>\r\n        <DialogTitle>Editar Turno</DialogTitle>\r\n        <DialogContent>\r\n            <TextField\r\n            autoFocus\r\n            margin=\"dense\"\r\n            label=\"Texto\"\r\n            multiline\r\n            value={text}\r\n            onChange={changeText}\r\n            fullWidth\r\n            />\r\n        </DialogContent>\r\n        <DialogActions>\r\n            <Button onClick={reload} color=\"primary\">\r\n                Recarregar\r\n            </Button>\r\n            <Button onClick={close} color=\"primary\">\r\n                Cancelar\r\n            </Button>\r\n            <Button onClick={save} color=\"primary\">\r\n                Salvar\r\n            </Button>\r\n        </DialogActions>\r\n        </Dialog>\r\n    );\r\n}","import ButtonBase from '@material-ui/core/ButtonBase';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport green from '@material-ui/core/colors/green';\r\nimport blue from '@material-ui/core/colors/lightBlue';\r\nimport grey from '@material-ui/core/colors/grey';\r\nimport steel from '@material-ui/core/colors/blueGrey';\r\n\r\n\r\nimport EditText from './EditText.js';\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    incoming: {\r\n        background: props=>props.info.theme==='light'?green[100]:grey[800],\r\n        padding: '18px 20px',\r\n        lineHeight: '26px',\r\n        fontSize: '16px',\r\n        borderRadius: '7px',\r\n        width: '90%',\r\n        position: 'relative',\r\n        '&::after': {\r\n            bottom: '100%',\r\n            left: '5%',\r\n            border: 'solid transparent',\r\n            content: '\" \"',\r\n            height: '0',\r\n            width: '0',\r\n            position: 'absolute',\r\n            pointerEvents: 'none',\r\n            borderBottomColor: props=>props.info.theme==='light'?green[100]:grey[800],\r\n            borderWidth: '10px',\r\n            marginLeft: '-10px',\r\n          }\r\n    },\r\n    outgoing:{\r\n        background: props=>props.info.theme==='light'?blue[100]:steel[800],\r\n        padding: '18px 18px',\r\n        lineHeight: '26px',\r\n        fontSize: '16px',\r\n        borderRadius: '7px',\r\n        width: '90%',\r\n        position: 'relative',\r\n        '&::after': {\r\n            bottom: '100%',\r\n            left: '95%',\r\n            border: 'solid transparent',\r\n            content: '\" \"',\r\n            height: '0',\r\n            width: '0',\r\n            position: 'absolute',\r\n            pointerEvents: 'none',\r\n            borderBottomColor: props=>props.info.theme==='light'?blue[100]:steel[800],\r\n            borderWidth: '10px',\r\n            marginLeft: '-10px',\r\n          }\r\n    }\r\n  });\r\n\r\nexport default function DialogCard(props){\r\n    const classes = useStyles(props);\r\n    function capitalize(string) {\r\n        return string.charAt(0).toUpperCase() + string.slice(1);\r\n    }\r\n    function addAlpha(color, opacity) {\r\n        const _opacity = Math.round(Math.min(Math.max(opacity || 1, 0), 1) * 255);\r\n        return color + _opacity.toString(16).toUpperCase();\r\n    }\r\n    \r\n    function handleSetIntention(i_turn){\r\n        if(props.info.intention >= 0 && !props.info.meta[props.info.selected].turns[i_turn].intentions.includes(props.info.intention)){\r\n            let newDialogs = props.info.data.dialogs;\r\n            const speaker = newDialogs[props.info.selected].turns[i_turn].speaker\r\n            const intent = speaker===\"agent\"? \"action\":\"intent\"\r\n            let newMeta = props.info.meta\r\n            newMeta[props.info.selected].turns[i_turn].intentions.push(props.info.intention);\r\n            newMeta[props.info.selected].int++;\r\n            props.setInfo({...props.info, meta: newMeta});\r\n        }\r\n    }\r\n    function handleRemoveIntention(int,i_turn){\r\n        let newMeta = props.info.meta\r\n        const index_remove = newMeta[props.info.selected].turns[i_turn].intentions.indexOf(int);\r\n        if (index_remove > -1) {\r\n            newMeta[props.info.selected].turns[i_turn].intentions.splice(index_remove, 1);\r\n            newMeta[props.info.selected].int--;\r\n        }\r\n        props.setInfo({...props.info, meta: newMeta});\r\n    }\r\n    function handleSetEntity(i_turn,i_split){\r\n        if(props.info.entity >= 0){\r\n            let selection = window.getSelection();\r\n            const start = selection.anchorOffset;\r\n            const end = selection.focusOffset;\r\n            let phrase = props.info.meta[props.info.selected].turns[i_turn].entities\r\n            let phrase_split = phrase.split('###')\r\n            if(i_split%2===0 && end>start && phrase.indexOf(selection.toString())!==-1){\r\n                phrase_split[i_split] = phrase_split[i_split].substring(0,start)+'###'+phrase_split[i_split].substring(start,end)+'&&&'+props.info.entity+'###'+phrase_split[i_split].substring(end)\r\n                let newMeta = props.info.meta;\r\n                newMeta[props.info.selected].ent++;\r\n                newMeta[props.info.selected].turns[i_turn].entities = phrase_split.join('###')\r\n                props.setInfo({...props.info, meta: newMeta});\r\n            }\r\n            else{\r\n                alert(\"Selecione uma área sem uma entidade!\")\r\n            }\r\n        }\r\n    }\r\n    function handleRemoveEntity(i_turn, i_split){\r\n        const phrase = props.info.meta[props.info.selected].turns[i_turn].entities\r\n        const phrase_split = phrase.split('###')\r\n        const start = phrase.indexOf(phrase_split[i_split])\r\n        const end_id = phrase.indexOf('&&&', start)\r\n        const end = phrase.indexOf('###', start)\r\n        const newDelex = phrase.substring(0,start-3)+phrase.substring(start,end_id)+phrase.substring(end+3)\r\n        let newMeta = props.info.meta;\r\n        newMeta[props.info.selected].ent--;\r\n        newMeta[props.info.selected].turns[i_turn].entities = newDelex\r\n        props.setInfo({...props.info, meta: newMeta});\r\n    }\r\n    function editTurn(i_turn){\r\n        props.setInfo({...props.info, edit: i_turn});\r\n    }\r\n    function setTopic(i_turn){\r\n        if(props.info.topic >= 0){\r\n            let newMeta = props.info.meta\r\n            newMeta[props.info.selected].turns[i_turn].topic = props.info.topic;\r\n            props.setInfo({...props.info, meta: newMeta});\r\n        }\r\n    }\r\n    function checkPreviousTopic(i_turn){\r\n        const topic = props.info.meta[props.info.selected].turns[i_turn].topic\r\n        const previousTopic = props.info.meta[props.info.selected].turns[i_turn-1] ? props.info.meta[props.info.selected].turns[i_turn-1].topic : -1\r\n        return topic !==-1 && (previousTopic !== topic)\r\n    }\r\n    function checkFutureTopic(i_turn){\r\n        const topic = props.info.meta[props.info.selected].turns[i_turn].topic\r\n        const futureTopic = props.info.meta[props.info.selected].turns[i_turn+1] ? props.info.meta[props.info.selected].turns[i_turn+1].topic : -1\r\n        return topic !==-1 && (futureTopic !== topic)\r\n    }\r\n    return(\r\n        <Grid item xs={4} container direction=\"column\" justifyContent=\"center\" alignItems=\"stretch\">\r\n            {props.info.edit!==-1?<EditText {...props}/>:null}\r\n            {props.info.data.dialogs[props.info.selected].turns.map((turn, i_turn) => (\r\n                <Grid item container direction=\"column\" justifyContent=\"flex-start\" alignItems={turn.speaker==='agent'?\"flex-start\":\"flex-end\"}>\r\n                    {checkPreviousTopic(i_turn)?\r\n                        <Grid item container style={{position: 'relative'}} xs={12}>\r\n                            <div style={{width: '100%', height: '10px', borderBottom: '1px solid '+props.info.topics[props.info.meta[props.info.selected].turns[i_turn].topic].color, textAlign: 'center'}}>\r\n                                <span style={{backgroundColor: 'white', padding: '0 1rem', color: props.info.topics[props.info.meta[props.info.selected].turns[i_turn].topic].color}}>\r\n                                    {props.info.topics[props.info.meta[props.info.selected].turns[i_turn].topic].value}\r\n                                </span>\r\n                            </div>\r\n                            <Divider/>\r\n                        </Grid>\r\n                    :\r\n                        null\r\n                    } \r\n                    <Grid item style={{padding:'0.5rem'}}>\r\n                        <b>\r\n                            {turn.speaker==='agent'?capitalize(turn.speaker):null}\r\n                            <span style={{cursor: 'pointer'}} onClick={()=>editTurn(i_turn)}> ✎ </span>\r\n                            <span style={{cursor: 'pointer'}} onClick={()=>setTopic(i_turn)}> 📌 </span>\r\n                            {turn.speaker==='client'?capitalize(turn.speaker):null}\r\n                        </b>\r\n                    </Grid>\r\n                    <Grid xs={12} item className={turn.speaker==='agent'?classes.incoming:classes.outgoing} component={Paper}>\r\n                        <Typography component=\"p\" gutterBottom>\r\n                            {props.info.meta[props.info.selected].turns[i_turn].entities.split(\"###\").map((entry, i_split) => {\r\n                                if(i_split%2){\r\n                                    const i_id = entry.indexOf('&&&')\r\n                                    const color = props.info.entities[entry.substring(i_id+3)].color\r\n                                    return <span onClick={()=>handleRemoveEntity(i_turn, i_split)} style={{border:'thin solid '+color, borderRadius: '5px', padding:'2px', cursor: 'pointer', color:color}} className='noselect'>{entry.substring(0,i_id)}\r\n                                        <span style={{fontSize: '8px', display: 'table-cell', verticalAlign: 'middle', backgroundColor: addAlpha(color,0.3), padding:'2px', borderRadius:'4px'}}>{props.info.entities[entry.substring(i_id+3)].value}</span>\r\n                                    </span>\r\n                                }else\r\n                                    return <span onMouseUp={()=>handleSetEntity(i_turn,i_split)}>{entry}</span>\r\n                            })}\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        {props.info.meta[props.info.selected].turns[i_turn].intentions.map((int) => (\r\n                                <ButtonBase onClick={()=>{handleRemoveIntention(int,i_turn)}} style={{padding:'1px', border:'thin solid '+props.info.intentions[int].color, borderRadius:'5px'}}>\r\n                                    <Typography variant=\"caption\" display=\"block\" style={{fontSize:'0.6rem',color:props.info.intentions[int].color}}>\r\n                                        {props.info.intentions[int].value}\r\n                                    </Typography>\r\n                                </ButtonBase>\r\n                            ))\r\n                        }\r\n                        <ButtonBase onClick={()=>handleSetIntention(i_turn)} style={{padding:'1px 3px 1px 3px', border:'thin solid grey', borderRadius:'5px'}}>\r\n                            <Typography variant=\"caption\" display=\"block\" style={{fontSize:'0.6rem',color:'grey'}}>\r\n                                +\r\n                            </Typography>\r\n                        </ButtonBase>\r\n                    </Grid>\r\n                    {checkFutureTopic(i_turn)?\r\n                        <Grid item container style={{position: 'relative'}} xs={12}>\r\n                            <div style={{width: '100%', height: '10px', borderBottom: '1px solid '+props.info.topics[props.info.meta[props.info.selected].turns[i_turn].topic].color, textAlign: 'center'}}>\r\n                            </div>\r\n                            <Divider/>\r\n                        </Grid>\r\n                    :\r\n                        null\r\n                    }  \r\n                </Grid>\r\n            ))}\r\n        </Grid>\r\n    )\r\n}","import CheckIcon from '@material-ui/icons/Check';\r\nimport CreateIcon from '@material-ui/icons/Create';\r\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport KeyboardReturnIcon from '@material-ui/icons/KeyboardReturn';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport React from 'react';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    tablepaper: {\r\n        height: 600,\r\n        width: '100%',\r\n        marginTop: theme.spacing(3),\r\n        overflow: 'auto',\r\n    },\r\n    tableRow: {\r\n        \"&.Mui-selected, &.Mui-selected:hover\": {\r\n            backgroundColor: '#e8eaf6',\r\n        }\r\n    }\r\n}));\r\n\r\nexport default function DialogTable(props){\r\n    const classes = useStyles();\r\n    function select(index){\r\n        props.setInfo({...props.info, drawer:false, selected: index});\r\n    }\r\n    function change(index,newStatus){\r\n        let newMeta = props.info.meta;\r\n        const oldStatus = newMeta[index].status\r\n        newMeta[index].status=newStatus\r\n        let newCount = props.info.count;\r\n        newCount[oldStatus]--;\r\n        newCount[newStatus]++;\r\n        props.setInfo({...props.info, meta: newMeta, count: newCount});\r\n    }\r\n    return(\r\n        <List>\r\n            {props.info.data.dialogs.map((entry, index) => {\r\n                if(props.type===props.info.meta[index].status) \r\n                    return(\r\n                        <React.Fragment>\r\n                            <Divider component=\"li\" />\r\n                            <ListItem>\r\n                                <ListItemText primary={\"ID\"+entry.id}/>\r\n                                <ListItemSecondaryAction>\r\n                                    <IconButton size='small' onClick={()=>select(index)}>\r\n                                        <CreateIcon />\r\n                                    </IconButton>\r\n                                    {props.info.meta[index].status===\"active\"?\r\n                                        <React.Fragment>\r\n                                            <IconButton size='small' onClick={()=>change(index,\"finished\")}>\r\n                                                <CheckIcon />\r\n                                            </IconButton>\r\n                                            <IconButton size='small' onClick={()=>change(index,\"deleted\")}>\r\n                                                <DeleteOutlineIcon />\r\n                                            </IconButton>\r\n                                        </React.Fragment>\r\n                                    :\r\n                                        <IconButton size='small' onClick={()=>change(index,\"active\")}>\r\n                                            <KeyboardReturnIcon />\r\n                                        </IconButton>\r\n                                    }\r\n                                </ListItemSecondaryAction>\r\n                            </ListItem>\r\n                        </React.Fragment>\r\n                    )\r\n                else\r\n                    return null;\r\n            })}\r\n        </List>\r\n    )\r\n}","import ChatBubbleOutlineIcon from '@material-ui/icons/ChatBubbleOutline';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport React from 'react';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport DialogTable from './DialogTable.js';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    fab_dialogue: {\r\n        position: 'fixed',\r\n        bottom: theme.spacing(4),\r\n        left: theme.spacing(4),\r\n    },\r\n    margin: {\r\n        margin: theme.spacing(1),\r\n    },\r\n}));\r\n\r\nfunction a11yProps(index) {\r\n    return {\r\n      id: `simple-tab-${index}`,\r\n      'aria-controls': `simple-tabpanel-${index}`,\r\n    };\r\n  }\r\n\r\nexport default function Tables(props) {\r\n    const classes = useStyles();\r\n    const [table, setTable] = React.useState(0);\r\n    const openDrawer = () => {\r\n        props.setInfo({...props.info, drawer: true});\r\n    }\r\n    const closeDrawer = () => {\r\n        props.setInfo({...props.info, drawer: false});\r\n    }\r\n    return(\r\n        <React.Fragment>\r\n            <Drawer anchor='left' open={props.info.drawer} onClose={closeDrawer}>\r\n                <Tabs value={table} indicatorColor=\"primary\" textColor=\"primary\" onChange={(event, n) => setTable(n)} aria-label=\"simple tabs example\">\r\n                    <Tab label={\"Ativos \"+props.info.count.active} {...a11yProps(0)} />\r\n                    <Tab label={\"Completos \"+props.info.count.finished} {...a11yProps(1)} />\r\n                    <Tab label={\"Deletados \"+props.info.count.deleted} {...a11yProps(2)} />\r\n                </Tabs>\r\n                \r\n                {table===0?<DialogTable type=\"active\" {...props} />\r\n                :table===1?<DialogTable type=\"finished\" {...props} />\r\n                :<DialogTable type=\"deleted\" {...props} />}\r\n            </Drawer>\r\n            <Fab variant=\"extended\" onClick={openDrawer} className={classes.fab_dialogue}>\r\n                <ChatBubbleOutlineIcon className={classes.margin}/>\r\n                Dialogos {props.info.count.finished}/{props.info.count.active+props.info.count.finished}\r\n            </Fab>\r\n        </React.Fragment>\r\n    )\r\n}","import AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\r\nimport Button from '@material-ui/core/Button';\r\nimport Box from '@material-ui/core/Box';\r\nimport CasinoIcon from '@material-ui/icons/Casino';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nvar randomColor = require('randomcolor');\r\n\r\nexport default function Creator(props) {\r\n    const [open, setOpen] = React.useState(false);\r\n    const [creation, setCreation] = React.useState({color: randomColor({luminosity: 'dark'}), value: ''})\r\n    function handleCreate(){\r\n        if(props.entity && !props.intention && !props.topic){\r\n            let newEntities = props.info.entities;\r\n            newEntities.push(creation);\r\n            props.setInfo({...props.info, toolsetOpen: false, entities: newEntities, entity: newEntities.length-1});\r\n        }\r\n        else if(props.intention  && !props.entity && !props.topic){\r\n            let newIntentions = props.info.intentions;\r\n            newIntentions.push(creation);\r\n            props.setInfo({...props.info, toolsetOpen: false, intentions: newIntentions, intention: newIntentions.length-1});\r\n        }\r\n        else if(props.topic  && !props.entity && !props.intention){\r\n            let newTopics = props.info.topics;\r\n            newTopics.push(creation);\r\n            props.setInfo({...props.info, toolsetOpen: false, topics: newTopics, topic: newTopics.length-1});\r\n        \r\n        }\r\n    }\r\n    function close(){\r\n        setCreation({color: randomColor(),value:''});\r\n        setOpen(false);\r\n    }\r\n    return(\r\n        <>\r\n            <IconButton size='small' onClick={() => {setOpen(true)}} >\r\n                <AddCircleOutlineIcon />\r\n            </IconButton>\r\n            <Dialog\r\n                open={open}\r\n                onClose={() => close()}\r\n                aria-labelledby=\"alert-dialog-title\"\r\n                aria-describedby=\"alert-dialog-description\"\r\n                >\r\n                <DialogTitle id=\"alert-dialog-title\">{\"Criar \" + (props.entity? \"Entidade\" : props.intention? \"Intenção\" : \"Domínio\")}</DialogTitle>\r\n                <DialogContent>\r\n                    <Grid container direction=\"row\" justifyContent=\"flex-start\" alignItems=\"center\" spacing={1}>\r\n                            <Grid item>\r\n                                <Box style={{width:'1.5rem',height:'1.5rem', backgroundColor: creation.color, border: 'thin solid grey', borderRadius: '0.3rem'}}/>\r\n                            </Grid>\r\n                        <Grid item>\r\n                            <IconButton onClick={() => setCreation({...creation, color: randomColor()})}>\r\n                                <CasinoIcon />\r\n                            </IconButton>\r\n                        </Grid>\r\n                    </Grid>\r\n                        <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        id=\"intention\"\r\n                        label={props.entity? \"Nome da Entidade\" : props.intention? \"Nome da Intenção\" : \"Nome do Domínio\"}\r\n                        fullWidth\r\n                        onChange={event => setCreation({...creation, value: event.target.value})}\r\n                        />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => close()} color=\"primary\">\r\n                        Cancelar\r\n                    </Button>\r\n                    <Button disabled={!creation.value} onClick={() => {handleCreate();close()}} color=\"primary\">\r\n                        Criar\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}","import React from 'react';\r\n\r\nimport Divider from '@material-ui/core/Divider';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\r\nimport CasinoIcon from '@material-ui/icons/Casino';\r\nimport CreateIcon from '@material-ui/icons/Create';\r\nimport SortByAlphaIcon from '@material-ui/icons/SortByAlpha';\r\nimport LabelOffIcon from '@material-ui/icons/LabelOff';\r\n\r\nimport Creator from './Creator.js';\r\n\r\nimport ToggleButton from '@material-ui/lab/ToggleButton';\r\n\r\n\r\nvar randomColor = require('randomcolor');\r\n\r\nexport default function DialogToolset(props) {\r\n    const [alpha,setAlpha] = React.useState(false);\r\n    function handleSelectEntity(index){\r\n        props.setInfo({...props.info, toolsetOpen: false, entity: index});\r\n    }\r\n    function handleSelectIntention(index){\r\n        props.setInfo({...props.info, toolsetOpen: false, intention: index});\r\n    }\r\n    function handleSelectTopic(index){\r\n        props.setInfo({...props.info, toolsetOpen: false, topic: index});\r\n    }\r\n    function changeColorIntention(index){\r\n        let newIntentions = props.info.intentions;\r\n        newIntentions[index].color = randomColor({luminosity: 'dark'});\r\n        props.setInfo({...props.info, intentions: newIntentions});\r\n    }\r\n    function changeColorEntity(index){\r\n        let newEntities = props.info.entities;\r\n        newEntities[index].color = randomColor({luminosity: 'dark'});\r\n        props.setInfo({...props.info, entities: newEntities});\r\n    }\r\n    const deselectIntention=()=>{\r\n        props.setInfo({...props.info, toolsetOpen: false, intention: -1});\r\n    }\r\n    const deselectEntity=()=>{\r\n        props.setInfo({...props.info, toolsetOpen: false, entity: -1});\r\n    }\r\n    const changeAlpha=()=>{\r\n        setAlpha(!alpha);\r\n    }\r\n    return(\r\n        <React.Fragment>\r\n                {props.info.toolsetSelected===1?\r\n                    <React.Fragment>\r\n                    <List dense='True'>\r\n                        <ListItem>\r\n                            <ToggleButton size=\"small\" selected={alpha} onChange={changeAlpha}>\r\n                                <SortByAlphaIcon />\r\n                            </ToggleButton>\r\n                            <IconButton size=\"small\" onClick={deselectIntention}>\r\n                                <LabelOffIcon />\r\n                            </IconButton>\r\n                            <Creator intention {...props}/>\r\n                        </ListItem>\r\n                        {/* {props.info.intentions.sort(function compare(a, b){\r\n                            if(alpha)\r\n                                return a.value.localeCompare(b.value)\r\n                            else\r\n                                return true\r\n                        } */}\r\n                        {props.info.intentions.map((entry, index) => (\r\n                            <React.Fragment>\r\n                                <Divider component=\"li\" />\r\n                                <ListItem button onClick={()=>handleSelectIntention(index)} style={{color: entry.color, paddingLeft:'2rem'}}>\r\n                                    <ListItemText primary={entry.value}/>\r\n                                    <ListItemSecondaryAction style={{marginRight:'1rem'}}>\r\n                                        <IconButton size=\"small\" onClick={()=>changeColorIntention(index)} edge=\"end\" aria-label=\"delete\">\r\n                                            <CasinoIcon />\r\n                                        </IconButton>\r\n                                        <IconButton size=\"small\" onClick={()=>alert(\"edit(intention)\")} edge=\"end\" aria-label=\"delete\">\r\n                                            <CreateIcon />\r\n                                        </IconButton>\r\n                                        <IconButton size=\"small\" onClick={()=>alert(\"edit(intention)\")} edge=\"end\" aria-label=\"delete\">\r\n                                            <DeleteOutlineIcon />\r\n                                        </IconButton>\r\n                                    </ListItemSecondaryAction>\r\n                                </ListItem>\r\n                            </React.Fragment>\r\n                        ))}\r\n                    </List>\r\n                    </React.Fragment>\r\n                :props.info.toolsetSelected===0?\r\n                    <React.Fragment>\r\n                        <List dense='True'>\r\n                            <ListItem>\r\n                                <ToggleButton size=\"small\" selected={alpha} onChange={changeAlpha}>\r\n                                    <SortByAlphaIcon />\r\n                                </ToggleButton>\r\n                                <IconButton size=\"small\" onClick={deselectEntity}>\r\n                                    <LabelOffIcon />\r\n                                </IconButton>\r\n                                <Creator entity {...props}/>\r\n                            </ListItem>\r\n                            {props.info.entities.map((entry, index) => (\r\n                                <React.Fragment>\r\n                                    <Divider component=\"li\" />\r\n                                    <ListItem button onClick={()=>handleSelectEntity(index)} style={{color: entry.color, paddingLeft:'2rem'}}>\r\n                                        <ListItemText primary={entry.value}/>\r\n                                        <ListItemSecondaryAction style={{marginRight:'1rem'}}>\r\n                                            <IconButton size=\"small\" onClick={()=>changeColorEntity(index)} edge=\"end\">\r\n                                                <CasinoIcon />\r\n                                            </IconButton>\r\n                                            <IconButton size=\"small\" onClick={()=>alert(\"edit(entity)\")} edge=\"end\">\r\n                                                <CreateIcon />\r\n                                            </IconButton>\r\n                                            <IconButton size=\"small\" onClick={()=>alert(\"edit(entity)\")} edge=\"end\">\r\n                                                <DeleteOutlineIcon />\r\n                                            </IconButton>\r\n                                        </ListItemSecondaryAction>\r\n                                    </ListItem>\r\n                                </React.Fragment>\r\n                            ))}\r\n                        </List>\r\n                    </React.Fragment>\r\n                :\r\n                    <React.Fragment>\r\n                        <Creator topic {...props}/>\r\n                        <List dense='True'>\r\n                            {props.info.topics.map((entry, index) => (\r\n                                <React.Fragment>\r\n                                    <Divider component=\"li\" />\r\n                                    <ListItem button onClick={()=>handleSelectTopic(index)} style={{color: entry.color}}>\r\n                                        <ListItemText primary={entry.value}/>\r\n                                        <ListItemSecondaryAction>\r\n                                        <IconButton size=\"small\" onClick={()=>alert(\"edit(topic)\")} edge=\"end\" aria-label=\"delete\">\r\n                                            <CreateIcon />\r\n                                        </IconButton>\r\n                                        </ListItemSecondaryAction>\r\n                                    </ListItem>\r\n                                </React.Fragment>\r\n                            ))}\r\n                        </List>\r\n                    </React.Fragment>\r\n                }\r\n        </React.Fragment>\r\n    )\r\n}","import ChatBubbleOutlineIcon from '@material-ui/icons/ChatBubbleOutline';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport React from 'react';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Fab from '@material-ui/core/Fab';\r\n\r\nimport PermIdentityIcon from '@material-ui/icons/PermIdentity';\r\nimport ErrorOutlineIcon from '@material-ui/icons/ErrorOutline';\r\n\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\n\r\nimport DialogToolset from './DialogToolset.js';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    margin: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    fab_entity: {\r\n        position: 'fixed',\r\n        bottom: theme.spacing(4),\r\n        right: theme.spacing(4),\r\n      },\r\n      fab_intention: {\r\n          position: 'fixed',\r\n          bottom: theme.spacing(12),\r\n          right: theme.spacing(4),\r\n      },\r\n      fab_topic: {\r\n        position: 'fixed',\r\n        bottom: theme.spacing(20),\r\n        right: theme.spacing(4),\r\n    },\r\n}));\r\n\r\nfunction a11yProps(index) {\r\n    return {\r\n      id: `simple-tab-${index}`,\r\n      'aria-controls': `simple-tabpanel-${index}`,\r\n    };\r\n  }\r\n\r\nexport default function Toolset(props) {\r\n    const classes = useStyles();\r\n    const closeToolset = () => {\r\n        props.setInfo({...props.info, toolsetOpen: false})\r\n    }\r\n    function openToolset(i){\r\n        props.setInfo({...props.info, toolsetOpen: true, toolsetSelected: i})\r\n    }\r\n    function changeToolset(i){\r\n        props.setInfo({...props.info, toolsetSelected: i})\r\n    }\r\n    return(\r\n        <React.Fragment>\r\n            <Drawer anchor='right' open={props.info.toolsetOpen} onClose={closeToolset}>\r\n                <Tabs value={props.info.toolsetSelected} indicatorColor=\"primary\" textColor=\"primary\" onChange={(event, i) => changeToolset(i)} aria-label=\"simple tabs example\">\r\n                    <Tab label=\"Entidades\" {...a11yProps(0)} />\r\n                    <Tab label=\"Intenções\" {...a11yProps(1)} />\r\n                    <Tab label=\"Domínios\" {...a11yProps(2)} />\r\n                </Tabs>\r\n                {props.info.toolsetSelected?\r\n                    <DialogToolset type=\"intention\" {...props} />\r\n                :\r\n                    <DialogToolset type=\"entity\" {...props} />\r\n                }\r\n            </Drawer>\r\n            <Fab variant=\"extended\" style={props.info.intention!==-1?{color:props.info.intentions[props.info.intention].color}:null} onClick={() => openToolset(1)} className={classes.fab_intention}>\r\n                <ErrorOutlineIcon className={classes.margin}/>\r\n                {props.info.intention!==-1?\r\n                    props.info.intentions[props.info.intention].value\r\n                :    \r\n                    'Intenções'\r\n                }\r\n            </Fab>\r\n            <Fab variant=\"extended\" style={props.info.entity!==-1?{color:props.info.entities[props.info.entity].color}:null} onClick={() => openToolset(0)} className={classes.fab_entity}>\r\n                <PermIdentityIcon className={classes.margin}/>\r\n                {props.info.entity!==-1?\r\n                    props.info.entities[props.info.entity].value\r\n                :    \r\n                    'Entidades'\r\n                }\r\n            </Fab>\r\n            <Fab variant=\"extended\" style={props.info.topic!==-1?{color:props.info.topics[props.info.topic].color}:null} onClick={() => openToolset(2)} className={classes.fab_topic}>\r\n                <ChatBubbleOutlineIcon className={classes.margin}/>\r\n                {props.info.topic!==-1?\r\n                    props.info.topics[props.info.topic].value\r\n                :    \r\n                    'Domínios'\r\n                }\r\n            </Fab>\r\n        </React.Fragment>\r\n    )\r\n}","import Button from '@material-ui/core/Button';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport React from 'react';\r\n\r\nimport DialogCard from './Annotation/DialogCard.js';\r\nimport Tables from './Annotation/Tables.js';\r\nimport Toolset from './Annotation/Toolset.js';\r\n\r\nexport default function Annotation(props) {\r\n    const openDrawer = () => {\r\n        props.setInfo({...props.info, drawer: true});\r\n    }\r\n    const dialogUp = () => {\r\n        props.setInfo({...props.info, selected: props.info.selected+1});\r\n    }\r\n    const dialogDown = () => {\r\n        props.setInfo({...props.info, selected: props.info.selected-1});\r\n    }\r\n    return(\r\n        <Grid item container xs={12} direction=\"column\" justifyContent=\"center\" alignItems=\"center\" spacing={1} style={{paddingTop:'1rem'}}>       \r\n            <Tables {...props}/>\r\n            <Toolset {...props}/>\r\n                {props.info.selected!==-1?\r\n                    <Grid item>\r\n                        <ButtonGroup color=\"primary\" aria-label=\"outlined primary button group\">\r\n                            <Button disabled={props.info.selected===0} onClick={dialogDown}>{'<'}</Button>\r\n                            <Button disabled>Dialogo Nº{props.info.data.dialogs[props.info.selected].id}</Button>\r\n                            <Button disabled={props.info.selected===props.info.data.dialogs.length-1} onClick={dialogUp}>{'>'}</Button>\r\n                        </ButtonGroup>\r\n                    </Grid>\r\n                :\r\n                    <Grid item>\r\n                        <Button variant=\"outlined\" onClick={openDrawer}>\r\n                            Selecione um Dialogo\r\n                        </Button>\r\n                    </Grid>\r\n                }\r\n            {props.info.selected!==-1?\r\n                <DialogCard {...props}/>\r\n            :\r\n                null\r\n            }\r\n            {props.info.selected!==-1?\r\n                <Grid item>\r\n                    <ButtonGroup color=\"primary\" aria-label=\"outlined primary button group\">\r\n                        <Button disabled={props.info.selected===0} onClick={dialogDown}>{'<'}</Button>\r\n                        <Button disabled>Dialogo Nº{props.info.data.dialogs[props.info.selected].id}</Button>\r\n                        <Button disabled={props.info.selected===props.info.data.dialogs.length-1} onClick={dialogUp}>{'>'}</Button>\r\n                    </ButtonGroup>\r\n                </Grid>\r\n                :\r\n                null\r\n            }\r\n        </Grid>\r\n    )\r\n}","import ButtonBase from '@material-ui/core/ButtonBase';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport EditText from './EditText.js';\r\n\r\nconst incomingHex = '#E8E8E8'; // '#b5d9a7'\r\nconst outgoingHex = '#C8C8C8'; // '#b9d5f0'\r\n\r\nconst useStyles = makeStyles({\r\n    incoming: {\r\n        background: incomingHex,\r\n        padding: '18px 20px',\r\n        lineHeight: '26px',\r\n        fontSize: '16px',\r\n        borderRadius: '7px',\r\n        width: '90%',\r\n        position: 'relative',\r\n        '&::after': {\r\n            bottom: '100%',\r\n            left: '5%',\r\n            border: 'solid transparent',\r\n            content: '\" \"',\r\n            height: '0',\r\n            width: '0',\r\n            position: 'absolute',\r\n            pointerEvents: 'none',\r\n            borderBottomColor: incomingHex,\r\n            borderWidth: '10px',\r\n            marginLeft: '-10px',\r\n          }\r\n    },\r\n    outgoing:{\r\n        background: outgoingHex,\r\n        padding: '18px 18px',\r\n        lineHeight: '26px',\r\n        fontSize: '16px',\r\n        borderRadius: '7px',\r\n        width: '90%',\r\n        position: 'relative',\r\n        '&::after': {\r\n            bottom: '100%',\r\n            left: '95%',\r\n            border: 'solid transparent',\r\n            content: '\" \"',\r\n            height: '0',\r\n            width: '0',\r\n            position: 'absolute',\r\n            pointerEvents: 'none',\r\n            borderBottomColor: outgoingHex,\r\n            borderWidth: '10px',\r\n            marginLeft: '-10px',\r\n          }\r\n    }\r\n  });\r\n\r\nexport default function DialogCard(props){\r\n    const classes = useStyles();\r\n    function capitalize(string) {\r\n        return string.charAt(0).toUpperCase() + string.slice(1);\r\n    }\r\n    function addAlpha(color, opacity) {\r\n        const _opacity = Math.round(Math.min(Math.max(opacity || 1, 0), 1) * 255);\r\n        return color + _opacity.toString(16).toUpperCase();\r\n    }\r\n    \r\n    function handleSetIntention(i_turn){\r\n        return false\r\n    }\r\n    function handleRemoveIntention(int,i_turn){\r\n        return false\r\n    }\r\n    function handleSetEntity(i_turn,i_split){\r\n        return false\r\n    }\r\n    function handleRemoveEntity(i_turn, i_split){\r\n        return false\r\n    }\r\n    function editTurn(i_turn){\r\n        return false\r\n    }\r\n    function setTopic(i_turn){\r\n        return false   \r\n    }\r\n    function checkPreviousTopic(i_turn){\r\n        return false\r\n    }\r\n    function checkFutureTopic(i_turn){\r\n        return false\r\n    }\r\n    return(\r\n        <Grid item xs={4} container direction=\"column\" justifyContent=\"center\" alignItems=\"stretch\">\r\n            {props.info.edit!==-1?<EditText {...props}/>:null}\r\n            {props.info.dataLearning.dialogs[props.info.learning].turns.map((turn, i_turn) => (\r\n                <Grid item container direction=\"column\" justifyContent=\"flex-start\" alignItems={turn.speaker==='agent'?\"flex-start\":\"flex-end\"}>\r\n                    {checkPreviousTopic(i_turn)?\r\n                        <Grid item container style={{position: 'relative'}} xs={12}>\r\n                            <div style={{width: '100%', height: '10px', borderBottom: '1px solid '+props.info.topics[props.info.metaLearning[props.info.learning].turns[i_turn].topic].color, textAlign: 'center'}}>\r\n                                <span style={{backgroundColor: 'white', padding: '0 1rem', color: props.info.topics[props.info.metaLearning[props.info.learning].turns[i_turn].topic].color}}>\r\n                                    {props.info.topics[props.info.metaLearning[props.info.learning].turns[i_turn].topic].value}\r\n                                </span>\r\n                            </div>\r\n                            <Divider/>\r\n                        </Grid>\r\n                    :\r\n                        null\r\n                    } \r\n                    <Grid item style={{padding:'0.5rem'}}>\r\n                        <b>\r\n                            {turn.speaker==='agent'?capitalize(turn.speaker):null}\r\n                            <span style={{cursor: 'pointer'}} onClick={()=>editTurn(i_turn)}> ✎ </span>\r\n                            <span style={{cursor: 'pointer'}} onClick={()=>setTopic(i_turn)}> 📌 </span>\r\n                            {turn.speaker==='client'?capitalize(turn.speaker):null}\r\n                        </b>\r\n                    </Grid>\r\n                    <Grid xs={12} item className={turn.speaker==='agent'?classes.incoming:classes.outgoing} component={Paper}>\r\n                        <Typography component=\"p\" gutterBottom>\r\n                            {props.info.metaLearning[props.info.learning].turns[i_turn].entities.split(\"###\").map((entry, i_split) => {\r\n                                if(i_split%2){\r\n                                    const i_id = entry.indexOf('&&&')\r\n                                    const color = props.info.entities[entry.substring(i_id+3)].color\r\n                                    return <span onClick={()=>handleRemoveEntity(i_turn, i_split)} style={{border:'thin solid '+color, borderRadius: '5px', padding:'2px', cursor: 'pointer', color:color}} className='noselect'>{entry.substring(0,i_id)}\r\n                                        <span style={{fontSize: '8px', display: 'table-cell', verticalAlign: 'middle', backgroundColor: addAlpha(color,0.3), padding:'2px', borderRadius:'4px'}}>{props.info.entities[entry.substring(i_id+3)].value}</span>\r\n                                    </span>\r\n                                }else\r\n                                    return <span onMouseUp={()=>handleSetEntity(i_turn,i_split)}>{entry}</span>\r\n                            })}\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        {props.info.metaLearning[props.info.learning].turns[i_turn].intentions.map((int) => (\r\n                                <ButtonBase onClick={()=>{handleRemoveIntention(int,i_turn)}} style={{padding:'1px', border:'thin solid '+props.info.intentions[int].color, borderRadius:'5px'}}>\r\n                                    <Typography variant=\"caption\" display=\"block\" style={{fontSize:'0.6rem',color:props.info.intentions[int].color}}>\r\n                                        {props.info.intentions[int].value}\r\n                                    </Typography>\r\n                                </ButtonBase>\r\n                            ))\r\n                        }\r\n                        <ButtonBase onClick={()=>handleSetIntention(i_turn)} style={{padding:'1px 3px 1px 3px', border:'thin solid grey', borderRadius:'5px'}}>\r\n                            <Typography variant=\"caption\" display=\"block\" style={{fontSize:'0.6rem',color:'grey'}}>\r\n                                +\r\n                            </Typography>\r\n                        </ButtonBase>\r\n                    </Grid>\r\n                    {checkFutureTopic(i_turn)?\r\n                        <Grid item container style={{position: 'relative'}} xs={12}>\r\n                            <div style={{width: '100%', height: '10px', borderBottom: '1px solid '+props.info.topics[props.info.metaLearning[props.info.learning].turns[i_turn].topic].color, textAlign: 'center'}}>\r\n                            </div>\r\n                            <Divider/>\r\n                        </Grid>\r\n                    :\r\n                        null\r\n                    }  \r\n                </Grid>\r\n            ))}\r\n        </Grid>\r\n    )\r\n}","import Button from '@material-ui/core/Button';\r\nimport GetAppIcon from '@material-ui/icons/GetApp';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nexport default function DownloadPage(props) {\r\n    // Terminar na V0:\r\n    // - entidades no arquivo de saida\r\n    // - tirar dialogos marcadas como deletados\r\n    // V0.1:\r\n    // - Passar a tabela para o drawer lateral\r\n    // - Nova barra de ferramentas\r\n    // - Deletar intenções e entidades (usar o marcador)\r\n    function download() {\r\n        const filename = props.info.filename.substring(0,props.info.filename.length-5)+'_anotado.json';\r\n        let meta = props.info.meta;\r\n        let output = props.info.data;\r\n        let intention_names = props.info.intentions.map((e) => (e.value))\r\n        let entity_names = props.info.entities.map((e) => (e.value))\r\n        output.ontology[\"slot-values\"] = {}\r\n        if(!Array.isArray(output.ontology.intents)){\r\n            output.ontology.intents = []\r\n        }\r\n        if(!Array.isArray(output.ontology.actions)){\r\n            output.ontology.actions = []\r\n        }\r\n        // console.log(props.info)\r\n        for(let d=0;d<output.dialogs.length;d++){\r\n            for(let t=0;t<output.dialogs[d].turns.length;t++){\r\n                let turn = output.dialogs[d].turns[t]\r\n                let turn_meta = meta[d].turns[t]\r\n                // Intenções\r\n                let intent_type_ont = turn.intent?'intents':'actions'\r\n                let intent_type = turn[\"turn-num\"]%2?'action':'intent'\r\n                turn[intent_type] = ''\r\n                for(let i=0;i<turn_meta.intentions.length;i++){\r\n                    let intention = intention_names[turn_meta.intentions[i]]\r\n                    if(!output.ontology[intent_type_ont]){\r\n                        output.ontology[intent_type_ont] = [intention]\r\n                    }\r\n                    else if(!output.ontology[intent_type_ont].includes(intention)){\r\n                        output.ontology[intent_type_ont].push(intention)\r\n                    }\r\n                    turn[intent_type] = turn[intent_type] +'['+intention+']'\r\n                }\r\n                // Entidades\r\n                let meta_delex = meta[d].turns[t].entities.split('###')\r\n                let final_delex = ''\r\n                turn['slot-values'] = {}\r\n                for(let i=0;i<meta_delex.length;i++){\r\n                    let start_id = meta_delex[i].indexOf('&&&')\r\n                    if(start_id===-1){\r\n                        final_delex = final_delex + meta_delex[i]\r\n                    }\r\n                    else{\r\n                        let entity = entity_names[meta_delex[i].substring(start_id+3)]\r\n                        let value = meta_delex[i].substring(0,start_id)\r\n                        final_delex = final_delex + '['+entity+']'\r\n                        // Adicionando na ontologia\r\n                        if(!output.ontology['slot-values'][entity]){\r\n                            output.ontology['slot-values'][entity] = [value]\r\n                        }\r\n                        else if(!output.ontology['slot-values'][entity].includes(value)){\r\n                            output.ontology['slot-values'][entity].push(value)\r\n                        }\r\n                        // Adicionando no slot-values\r\n                        if(!(entity in turn['slot-values'])){\r\n                            turn['slot-values'][entity]=value;\r\n                        }\r\n                        else{\r\n                            if(Array.isArray(turn['slot-values'][entity])){\r\n                                if(!turn['slot-values'][entity].includes(value)){\r\n                                    turn['slot-values'][entity].push(value);\r\n                                }\r\n                            }\r\n                            // Se não for uma lista, preciso ou verificar se não é o mesmo valor, ou criar uma lista\r\n                            else{\r\n                                if(!(value===turn['slot-values'][entity])){\r\n                                    let newList = [turn['slot-values'][entity],value];\r\n                                    turn['slot-values'][entity] = newList;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                turn[\"utterance_delex\"] = final_delex;\r\n            }\r\n        }\r\n        // Deletes dialogues 92968\r\n        var before = output[\"dialogs\"].length;\r\n        output[\"dialogs\"] = output[\"dialogs\"].filter((diag, i)=>{\r\n            return meta[i].status !== \"deleted\";\r\n        });\r\n        meta = meta.filter((diag, i)=>{\r\n            return diag.status !== \"deleted\";\r\n        });\r\n        var after = output[\"dialogs\"].length\r\n        alert(\"Check: \"+(before-after)+\" dialogs deleted\")\r\n        var file = new Blob([JSON.stringify(output,undefined,2)], {type: \"application/json\"});\r\n        if (window.navigator.msSaveOrOpenBlob) // IE10+\r\n            window.navigator.msSaveOrOpenBlob(file, filename);\r\n        else { // Others\r\n            var a = document.createElement(\"a\"), url = URL.createObjectURL(file);\r\n            a.href = url;\r\n            a.download = filename;\r\n            document.body.appendChild(a);\r\n            a.click();\r\n            setTimeout(function() {\r\n                document.body.removeChild(a);\r\n                window.URL.revokeObjectURL(url);\r\n            }, 0);\r\n        }\r\n    }\r\n    return(\r\n        <Grid item container direction=\"column\" justifyContent=\"center\" alignItems=\"center\">\r\n            <Typography style={{paddingTop:'13rem',paddingBottom:'2rem'}}>\r\n                Parabéns, seu dataset está anotado!\r\n            </Typography>\r\n            <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                size=\"large\"\r\n                startIcon={<GetAppIcon />}\r\n                onClick={() => download()}\r\n                >\r\n                Download\r\n            </Button>\r\n        </Grid>\r\n    )\r\n}\r\n","import Button from '@material-ui/core/Button';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport React from 'react';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport {DropzoneAreaBase} from 'material-ui-dropzone';\r\nimport randomColor from 'randomcolor';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    dropzone: {\r\n        paddingTop: '1rem',\r\n        margin: 'auto',\r\n        maxWidth: '50rem',\r\n        textAlign: 'center'\r\n    },\r\n    card: {\r\n        textAlign: 'left'   \r\n    },\r\n    continueButton: {\r\n        marginTop: '1rem',\r\n    },\r\n}));\r\n\r\nfunction SideCard(props){\r\n    return(\r\n      <Grid item xs={6}>\r\n        <Card xs={6}>\r\n          <CardActionArea href={\"https://unicamp-cit.notion.site/unicamp-cit/CI-T-Unicamp-ca7a3fc10d9a43f09a14c5dd4d31e554\"}>\r\n            <div style={{display: 'flex'}}>\r\n              <CardMedia style={{width: 100}} image={props.image}/>\r\n              <div style={{display: 'flex', flexDirection: 'column'}}>\r\n                <CardContent>\r\n                  <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                    {props.title}\r\n                  </Typography>\r\n                  <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                    {props.text}\r\n                  </Typography>\r\n                </CardContent>\r\n              </div>\r\n            </div>\r\n          </CardActionArea>\r\n        </Card>\r\n      </Grid>\r\n    )\r\n  }\r\n  \r\n  function Cards(){\r\n      return(\r\n        <Grid container direction=\"row\" justifyContent=\"center\" alignItems=\"center\" spacing={2} style={{paddingBottom: '2rem', textAlign: 'left'}}>   \r\n          <SideCard title=\"Tutorial\" text=\"Aprenda a usar a ferramenta\" image=\"https://www.pythontutorial.net/wp-content/uploads/2020/11/tkinter-tutorial.png\"/>\r\n          <SideCard title=\"Metodologia\" text=\"Como decidir entidades e intenções?\" image=\"https://www.mahdimamouri.com/media/consulting/nlp.png\"/>\r\n          <SideCard title=\"Documentação\" text=\"Como alterar a API e funções\" image=\"https://code.visualstudio.com/assets/docs/languages/javascript/overview.png\"/>\r\n          <SideCard title=\"Equipe\" text=\"Conheça nossa equipe de pesquisa!\" image=\"https://ic.unicamp.br/~jreis/media/image1.png\"/>\r\n        </Grid>\r\n      )\r\n  }\r\n\r\nexport default function UploadPage(props) {\r\n    const classes = useStyles();\r\n    const [settings, setSettings] = React.useState({\r\n        todo: {\r\n            manual: true,\r\n            verification: false,\r\n            download: false,\r\n        },\r\n        filename: '',\r\n        data: {dialogs: []},\r\n        open: false,\r\n        range: [0,100],\r\n    });\r\n    function handleTodo(event){\r\n        setSettings({...settings, todo: {...settings.todo, [event.target.name]: event.target.checked}});\r\n    }\r\n    const handleRange = (event,range) => {\r\n        setSettings({...settings, range: range});\r\n    }\r\n    function b64DecodeUnicode(str) {\r\n        return decodeURIComponent(atob(str).split('').map(function(c) {\r\n            return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\r\n        }).join(''));\r\n    }\r\n    var printError = function(error, explicit) {\r\n        console.log(`[${explicit ? 'EXPLICIT' : 'INEXPLICIT'}] ${error.name}: ${error.message}`);\r\n    }\r\n    function handleFile(fileObjs){\r\n        const filename = fileObjs[0].file.name\r\n        console.log(filename +'-'+fileObjs[0].file)\r\n        try {\r\n            let result = JSON.parse(b64DecodeUnicode(fileObjs[0].data.substring(29)));\r\n            setTemp(filename,result);\r\n        } catch (e) {\r\n            alert(\"Seu .json está com problemas, verifique se ele não há caracteres faltando ou errados\\n(veja o erro no console.log)\");\r\n            if (e instanceof SyntaxError) {\r\n                printError(e, true);\r\n            } else {\r\n                printError(e, false);\r\n            }\r\n        }\r\n    } \r\n    function seeExample(){\r\n        const example = require('../../ExampleData/creditos_placa_errada_8.json');\r\n        setTemp('creditos_placa_errada_8.json',example)\r\n    }\r\n    function setTemp(filename,json_data){\r\n        setSettings({...settings, filename: filename, data:json_data, range: [0,json_data.dialogs.length-1], open: true});\r\n    }\r\n    function handleConfirm(){\r\n        let json_data = settings.data\r\n        // TODO depois corrige isso aqui pra nao descartar dialogos\r\n        // json_data.dialogs = json_data.dialogs.slice(settings.range[0],settings.range[1]);\r\n        let meta = []\r\n        let count = {active: json_data.dialogs.length, finished: 0, deleted: 0}\r\n        let entities_id = Object.keys(json_data.ontology['slot-values']);\r\n        let entities = entities_id.map((value) => ({color: randomColor({luminosity: 'dark'}), value: value}))\r\n        let intentions_id = json_data.ontology.intents.concat(json_data.ontology.actions);\r\n        intentions_id = [...new Set(intentions_id)].sort();\r\n        let intentions = intentions_id.map((value) => ({color: randomColor({luminosity: 'dark'}), value: value}))\r\n        console.log(json_data.dialogs.length);\r\n        for(let d=0;d<json_data.dialogs.length;d++){\r\n            let turnmeta = []\r\n            let int = 0;\r\n            let ent = 0;\r\n            for(let t=0;t<json_data.dialogs[d].turns.length;t++){\r\n                let turn = json_data.dialogs[d].turns[t]\r\n                // Parte das intenções\r\n                let intent_name = turn.speaker===\"client\"?\"intent\":\"action\";\r\n                let intents_str = turn[intent_name]\r\n                let intention_list = []\r\n                if(intents_str&&intents_str!==\"\"){\r\n                    let intents = turn[intent_name].replace(\"]\",\"\").split(\"[\");\r\n                    // Criar intenção que não está na lista\r\n                    for(let i=0;i<intents.length;i++){\r\n                        let intent = intents[i].replace(\"]\",\"\")\r\n                        if(intent!==''){\r\n                            if(!intentions_id.includes(intent)){\r\n                                intentions_id.push(intent)\r\n                                intentions.push({color: randomColor({luminosity: 'dark'}), value: intent})\r\n                            }\r\n                            intention_list.push(intentions_id.indexOf(intent));\r\n                            int++;\r\n                        }\r\n                    }\r\n                }\r\n                // Parte das entidades\r\n                let newDelex = '';\r\n                if(turn.utterance_delex){\r\n                    let oldDelex = turn.utterance_delex;\r\n                    let oldDelex_split = oldDelex.split('[')\r\n                    for(let i=0;i<oldDelex_split.length;i++){\r\n                        let end = oldDelex_split[i].indexOf(']')\r\n                        if(end!==-1){\r\n                            let entity = oldDelex_split[i].substring(0,end);\r\n                            let value = turn[\"slot-values\"][entity]\r\n                            if(!entities_id.includes(entity)){\r\n                                entities_id.push(entity)\r\n                                entities.push({color: randomColor({luminosity: 'dark'}), value: entity})\r\n                            }\r\n                            let entity_id = entities_id.indexOf(entity)\r\n                            if(Array.isArray(value)){\r\n                                newDelex = newDelex + '###'+value.shift()+'&&&'+entity_id+'###'+oldDelex_split[i].substring(end+1)\r\n                            }\r\n                            else{\r\n                                newDelex = newDelex + '###'+value+'&&&'+entity_id+'###'+oldDelex_split[i].substring(end+1)\r\n                            }\r\n                            ent++;\r\n                        }\r\n                        else{\r\n                            newDelex = newDelex + oldDelex_split[i]\r\n                        }\r\n                    }\r\n                }\r\n                turnmeta.push({\r\n                    intentions: intention_list,\r\n                    topic: -1,\r\n                    entities: newDelex?newDelex:json_data.dialogs[d].turns[t].utterance\r\n                })\r\n            }\r\n            meta.push({int: int, ent: ent, status:\"active\", turns: turnmeta})\r\n        }\r\n        props.setInfo({...props.info, entities: entities, intentions: intentions, filename: settings.filename, data: json_data, meta: meta, count: count, step: 0});\r\n        setSettings({\r\n            todo: {\r\n                manual: true,\r\n                verification: false,\r\n                download: false,\r\n            },\r\n            data: {dialogs: []},\r\n            open: false,\r\n            dialogs: 0,\r\n        })\r\n    }\r\n\r\n\r\n    return(\r\n        <main className={classes.dropzone}>\r\n            <Grid container direction=\"row\" justifyContent=\"center\" alignItems=\"center\" spacing={2} style={{paddingBottom: '2rem'}}>\r\n                <Cards />\r\n            </Grid>\r\n            <DropzoneAreaBase\r\n                dropzoneText=\"Adicione as conversas do seu Chatbot\"\r\n                onAdd={(fileObjs) => {handleFile(fileObjs)}}\r\n                />\r\n            <Button variant=\"contained\" color=\"primary\" className={classes.continueButton} onClick={() => seeExample()}>\r\n                Veja os dados de Exemplo\r\n            </Button>\r\n            <Dialog\r\n                open={settings.open}\r\n                onClose={() => setSettings({...settings, data: {dialogs: []}, open: false})}\r\n                aria-labelledby=\"alert-dialog-title\"\r\n                aria-describedby=\"alert-dialog-description\"\r\n                maxWidth='sm'\r\n                fullWidth={true}\r\n                >\r\n                <DialogContent>\r\n                    <Typography variant='h5'>\r\n                        {\"Arquivo \" + settings.filename}\r\n                    </Typography>\r\n                    <Grid container direction=\"column\" justifyContent=\"flex-start\" alignItems=\"center\">\r\n                        <Typography variant=\"h6\">\r\n                            O que você deseja fazer?\r\n                        </Typography>\r\n                        <FormGroup>\r\n                            <FormControlLabel\r\n                            control={<Switch disabled checked={settings.todo.manual} onChange={handleTodo} color=\"primary\" name=\"manual\" />}\r\n                            label=\"Anotação Manual\"\r\n                            />\r\n                            {settings.todo.manual?\r\n                                <>\r\n                                    <Slider value={settings.range} onChange={handleRange} aria-labelledby=\"range-slider\"\r\n                                        step={1}\r\n                                        min={0}\r\n                                        max={settings.data.dialogs.length-1}\r\n                                        valueLabelFormat={(value) => {return value}}\r\n                                        valueLabelDisplay=\"auto\"\r\n                                    />\r\n                                    <Typography variant=\"caption\">\r\n                                        Você anotará <b>{Math.floor(settings.range[1]-settings.range[0])+1}</b> dialogos (ID{settings.data.dialogs[settings.range[0]]?settings.data.dialogs[settings.range[0]].id:0} - ID{settings.data.dialogs[settings.range[1]]?settings.data.dialogs[settings.range[1]].id:0})\r\n                                    </Typography>\r\n                                </>\r\n                            :null}\r\n                            <FormControlLabel\r\n                            control={<Switch disabled checked={settings.todo.verification} onChange={handleTodo} color=\"primary\" name=\"verification\" />}\r\n                            label=\"Active Learning\"\r\n                            />\r\n                            <FormControlLabel\r\n                            control={<Switch disabled checked={settings.todo.download} onChange={handleTodo} color=\"primary\" name=\"download\" />}\r\n                            label=\"Donwload do Dataset\"\r\n                            />\r\n                        </FormGroup>\r\n                        {!settings.todo.manual && !settings.todo.verification?\r\n                        <Typography variant=\"caption\">\r\n                            A IA pré-treinada fará <b>toda a anotação</b> para você\r\n                        </Typography>\r\n                        :settings.todo.manual && !settings.todo.verification?\r\n                        <Typography variant=\"caption\">\r\n                            Você irá anotar algumas <b>intenções e entidades</b> para a IA.\r\n                        </Typography>\r\n                        :settings.todo.manual && settings.todo.verification?\r\n                        <Typography variant=\"caption\">\r\n                            Você irá anotar <b>intenções, entidades,</b> e ainda ajudar a <b>verificar</b> as que a IA anotou.\r\n                        </Typography>\r\n                        :\r\n                        <Typography variant=\"caption\">\r\n                            Você irá <b>conferir e arrumar</b> as anotações feitas pela IA.\r\n                        </Typography>\r\n                        }\r\n                    </Grid>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => setSettings({...settings, data: {dialogs: []}, open: false})} color=\"primary\">\r\n                        Cancelar\r\n                    </Button>\r\n                    <Button onClick={() => handleConfirm()} color=\"primary\">\r\n                        Confirmar\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </main>\r\n    )\r\n}\r\n","import Grid from '@material-ui/core/Grid';\r\nimport React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nexport default function ErrorPage(props) {\r\n    return(\r\n        <Grid item container direction=\"column\" justifyContent=\"center\" alignItems=\"center\">\r\n            <Typography style={{paddingTop:'13rem',paddingBottom:'2rem'}}>\r\n                Olá, se você está vendo essa página, há algum problema na navegação dos passos. Por favor informe os administradores sobre o problema.\r\n            </Typography>\r\n        </Grid>\r\n    )\r\n}","import Button from '@material-ui/core/Button';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\nimport Container from '@material-ui/core/Container';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport React from 'react';\r\nimport { MuiThemeProvider, createTheme } from \"@material-ui/core/styles\";\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport Stepper from '@material-ui/core/Stepper';\r\nimport Step from '@material-ui/core/Step';\r\nimport StepLabel from '@material-ui/core/StepLabel';\r\n\r\nimport Footer from './Common/Footer.js';\r\nimport TitleToolbar from './Common/TitleToolbar.js';\r\nimport Forms from './Common/Forms.js';\r\nimport AnnotationPage from './Pages/AnnotationPage.js';\r\nimport LearningPage from './Pages/LearningPage.js';\r\nimport DownloadPage from './Pages/DownloadPage.js';\r\nimport UploadPage from './Pages/UploadPage.js';\r\nimport ErrorPage from './Pages/ErrorPage.js';\r\n\r\n\r\nconst lighttheme = createTheme({\r\n    palette: {\r\n        type: \"light\",\r\n        main: '#123'\r\n    }\r\n});\r\nconst darktheme = createTheme({\r\n    palette: {\r\n        type: \"dark\",\r\n    }\r\n});\r\n\r\nexport default function Page() {\r\n    const [info, setInfo] = React.useState({\r\n      filename: '',\r\n      step: -1,\r\n      selected: -1,\r\n      data: {},\r\n      meta: [],\r\n      intention: -1,\r\n      intentions: [],\r\n      count: {active: 0, finished: 0, deleted: 0},\r\n      entity: -1,\r\n      topic: -1,\r\n      topics: [],\r\n      drawer: false,\r\n      toolsetOpen: false,\r\n      toolsetSelected: 0,\r\n      edit: -1,\r\n      entities: [],\r\n      learning: -1,\r\n      dataLearning: {},\r\n      metaLearning: [],\r\n      forms: true,\r\n      theme: useMediaQuery('(prefers-color-scheme: dark)')?'dark':'light',\r\n      color:'red',\r\n    });\r\n    function handleStep(nstep){\r\n      setInfo({...info, step: nstep});\r\n    }\r\n    \r\n    const sendInfo = {info, setInfo}\r\n    return (\r\n        <MuiThemeProvider theme={info.theme === 'light' ? lighttheme : darktheme}>\r\n            {console.log(info)}\r\n            <CssBaseline />\r\n            <div style={{minHeight:'97vh'}}>\r\n                <Container maxWidth=\"lg\">\r\n                    <TitleToolbar {...sendInfo}/>\r\n                </Container>\r\n                <div style={{paddingRight:'1rem',paddingLeft:'3rem'}}>\r\n                    {0 <= info.step && info.step <= 3? \r\n                        <main>\r\n                            <Grid container xs={12} direction=\"column\" justifyContent=\"flex-start\" alignItems=\"center\">\r\n                                <Grid item xs={6}>\r\n                                    <Stepper activeStep={info.step} alternativeLabel style={{ backgroundColor: \"transparent\" }}>\r\n                                        <Step key={0}>\r\n                                            <StepLabel>Anotador</StepLabel>\r\n                                        </Step>\r\n                                        <Step key={1}>\r\n                                            <StepLabel>Baixar</StepLabel>\r\n                                        </Step>\r\n                                    </Stepper>\r\n                                </Grid>\r\n                                <Grid item xs={12}>\r\n                                    <ButtonGroup variant=\"contained\" color=\"primary\" aria-label=\"contained primary button group\">\r\n                                        <Button onClick={() => {handleStep(info.step-1)}}>Voltar</Button>\r\n                                        <Button disabled={info.step>=2} onClick={() => {handleStep(info.step+1)}}>Avançar</Button>\r\n                                    </ButtonGroup>\r\n                                </Grid>\r\n                                {info.step === 0?\r\n                                    <AnnotationPage {...sendInfo}/>\r\n                                :info.step === 1?\r\n                                    <DownloadPage {...sendInfo}/>\r\n                                :\r\n                                    <ErrorPage />\r\n                                }\r\n                            </Grid>\r\n                        </main>\r\n                    :\r\n                        <UploadPage {...sendInfo} />\r\n                    }\r\n                </div>\r\n            </div>\r\n            <Footer />\r\n        </MuiThemeProvider>\r\n\t);\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Page from './Components/Page.js'\n\nReactDOM.render(<Page />,document.getElementById('root'));\n"],"sourceRoot":""}